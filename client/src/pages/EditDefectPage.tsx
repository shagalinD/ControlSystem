import React, { useState, useEffect } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import { useForm } from 'react-hook-form'
import type { Defect, UpdateDefectFormData, Project, User } from '../types'
import { defectService } from '../services/defectService'
import { projectService } from '../services/projectService'
import { userService } from '../services/userService'
import { useAuthStore } from '../store/authStore'
import { Button } from '../components/ui/Button'
import { Input } from '../components/ui/Input'
import { LoadingSpinner } from '../components/ui/LoadingSpinner'

export const EditDefectPage: React.FC = () => {
  const { id } = useParams<{ id: string }>()
  const navigate = useNavigate()
  const { user } = useAuthStore()
  const [defect, setDefect] = useState<Defect | null>(null)
  const [projects, setProjects] = useState<Project[]>([])
  const [engineers, setEngineers] = useState<User[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string>('')

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<UpdateDefectFormData>()

  useEffect(() => {
    const loadData = async () => {
      if (!id) return

      setIsLoading(true)
      setError('')

      try {
        const [defectResponse, projectsResponse, engineersResponse] =
          await Promise.all([
            defectService.getDefectById(parseInt(id)),
            projectService.getProjects(),
            userService.getEngineers(),
          ])

        const defectData = defectResponse.defect
        setDefect(defectData)
        setProjects(projectsResponse.data)
        setEngineers(engineersResponse.data)

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –¥–µ—Ñ–µ–∫—Ç–∞
        reset({
          title: defectData.title,
          description: defectData.description,
          status: defectData.status,
          priority: defectData.priority,
          deadline: defectData.deadline
            ? defectData.deadline.split('T')[0]
            : undefined,
          project_id: defectData.project_id,
          assignee_id: defectData.assignee_id || undefined,
        })
      } catch (err) {
        setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
      } finally {
        setIsLoading(false)
      }
    }

    loadData()
  }, [id, reset])

  const onSubmit = async (data: UpdateDefectFormData) => {
    if (!defect) return

    setIsSubmitting(true)
    setError('')

    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const updateData: any = { ...data }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º assignee_id –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
      if (updateData.assignee_id) {
        updateData.assignee_id = parseInt(updateData.assignee_id)
      } else {
        updateData.assignee_id = null
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º project_id –≤ —á–∏—Å–ª–æ
      updateData.project_id = parseInt(updateData.project_id)

      await defectService.updateDefect(defect.id, updateData)
      navigate(`/defects/${defect.id}`)
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–∞')
    } finally {
      setIsSubmitting(false)
    }
  }

  const canEditDefect =
    user?.role_name === 'manager' ||
    (user?.role_name === 'engineer' && defect?.author_id === user.id)

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –¥–µ—Ñ–µ–∫—Ç
  if (!isLoading && !canEditDefect) {
    return (
      <div className='text-center py-12'>
        <div className='text-gray-400 text-6xl mb-4'>üö´</div>
        <h3 className='text-lg font-medium text-gray-900 mb-2'>
          –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
        </h3>
        <p className='text-gray-600 mb-4'>
          –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ—Ñ–µ–∫—Ç–∞
        </p>
        <Button onClick={() => navigate(`/defects/${id}`)}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ—Ñ–µ–∫—Ç—É
        </Button>
      </div>
    )
  }

  if (isLoading) {
    return (
      <div className='flex justify-center items-center min-h-64'>
        <LoadingSpinner size='lg' />
      </div>
    )
  }

  if (!defect) {
    return (
      <div className='text-center py-12'>
        <div className='text-gray-400 text-6xl mb-4'>‚ùå</div>
        <h3 className='text-lg font-medium text-gray-900 mb-2'>
          –î–µ—Ñ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        </h3>
        <p className='text-gray-600 mb-4'>
          –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –¥–µ—Ñ–µ–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω
        </p>
        <Button onClick={() => navigate('/defects')}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –¥–µ—Ñ–µ–∫—Ç–æ–≤
        </Button>
      </div>
    )
  }

  return (
    <div className='max-w-2xl mx-auto'>
      <div className='mb-6'>
        <h1 className='text-2xl font-bold text-gray-900'>
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞
        </h1>
        <p className='text-gray-600 mt-1'>–û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ñ–µ–∫—Ç–µ</p>
      </div>

      {error && (
        <div className='bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6'>
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit(onSubmit)} className='space-y-6'>
        <div className='bg-white p-6 rounded-lg shadow-sm border border-gray-200'>
          <div className='space-y-4'>
            <Input
              label='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞ *'
              {...register('title', {
                required: '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
                minLength: {
                  value: 5,
                  message: '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤',
                },
              })}
              error={errors.title?.message}
            />

            <div>
              <label className='block text-sm font-medium text-gray-700 mb-1'>
                –û–ø–∏—Å–∞–Ω–∏–µ *
              </label>
              <textarea
                {...register('description', {
                  required: '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
                  minLength: {
                    value: 10,
                    message: '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤',
                  },
                })}
                rows={4}
                className={`
                  w-full px-3 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                  ${errors.description ? 'border-red-500' : 'border-gray-300'}
                `}
              />
              {errors.description && (
                <p className='mt-1 text-sm text-red-600'>
                  {errors.description.message}
                </p>
              )}
            </div>

            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
              <div>
                <label className='block text-sm font-medium text-gray-700 mb-1'>
                  –ü—Ä–æ–µ–∫—Ç *
                </label>
                <select
                  {...register('project_id', {
                    required: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç',
                  })}
                  className={`
                    w-full px-3 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                    ${errors.project_id ? 'border-red-500' : 'border-gray-300'}
                  `}
                >
                  <option value=''>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç</option>
                  {projects.map((project) => (
                    <option key={project.id} value={project.id}>
                      {project.name}
                    </option>
                  ))}
                </select>
                {errors.project_id && (
                  <p className='mt-1 text-sm text-red-600'>
                    {errors.project_id.message}
                  </p>
                )}
              </div>

              <div>
                <label className='block text-sm font-medium text-gray-700 mb-1'>
                  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç *
                </label>
                <select
                  {...register('priority', {
                    required: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
                  })}
                  className={`
                    w-full px-3 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                    ${errors.priority ? 'border-red-500' : 'border-gray-300'}
                  `}
                >
                  <option value=''>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</option>
                  <option value='low'>–ù–∏–∑–∫–∏–π</option>
                  <option value='medium'>–°—Ä–µ–¥–Ω–∏–π</option>
                  <option value='high'>–í—ã—Å–æ–∫–∏–π</option>
                  <option value='critical'>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
                </select>
                {errors.priority && (
                  <p className='mt-1 text-sm text-red-600'>
                    {errors.priority.message}
                  </p>
                )}
              </div>
            </div>

            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
              <div>
                <label className='block text-sm font-medium text-gray-700 mb-1'>
                  –°—Ç–∞—Ç—É—Å *
                </label>
                <select
                  {...register('status', {
                    required: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å',
                  })}
                  className={`
                    w-full px-3 py-2 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500
                    ${errors.status ? 'border-red-500' : 'border-gray-300'}
                  `}
                >
                  <option value='new'>–ù–æ–≤–∞—è</option>
                  <option value='in_progress'>–í —Ä–∞–±–æ—Ç–µ</option>
                  <option value='on_review'>–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</option>
                  <option value='closed'>–ó–∞–∫—Ä—ã—Ç–∞</option>
                  <option value='cancelled'>–û—Ç–º–µ–Ω–µ–Ω–∞</option>
                </select>
                {errors.status && (
                  <p className='mt-1 text-sm text-red-600'>
                    {errors.status.message}
                  </p>
                )}
              </div>

              <div>
                <label className='block text-sm font-medium text-gray-700 mb-1'>
                  –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                </label>
                <select
                  {...register('assignee_id')}
                  className='w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500'
                >
                  <option value=''>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</option>
                  {engineers.map((engineer) => (
                    <option key={engineer.id} value={engineer.id}>
                      {engineer.full_name}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <Input
              label='–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
              type='date'
              {...register('deadline')}
              min={new Date().toISOString().split('T')[0]}
            />
          </div>
        </div>

        <div className='flex justify-end space-x-4'>
          <Button
            type='button'
            variant='secondary'
            onClick={() => navigate(`/defects/${defect.id}`)}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button type='submit' isLoading={isSubmitting}>
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
          </Button>
        </div>
      </form>
    </div>
  )
}
